Create a new branch at an older commit location:
- git checkout -b old-state <older-commit-sha>
- git checkout -b old-state 0d1d7fc32

Hard delete unpublished commits:
# This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
- git reset --hard 0d1d7fc32

-/- Alternatively, if there's work to keep:
- git stash
  git reset --hard 0d1d7fc32
  git stash pop
# This saves the modifications, then reapplies that patch after resetting.
# You could get merge conflicts, if you've modified things which were
# changed since the commit you reset to.

Undo published commits with new commits:
	On the other hand, if you've published the work, you probably don't want to reset the branch, since that's effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don't rewrite any history.
# This will create three separate revert commits:
- git revert a867b4af 25eee4ca 0766c053
# It also takes ranges. This will revert the last two commits:
- git revert HEAD~2..HEAD
# Reverting a merge commit
- git revert -m 1 <merge_commit_sha>

( # To get just one, you could use `rebase -i` to squash them afterwards
	# Or, you could do it manually (be sure to do this at top level of the repo)
	# get your index and work tree into the desired state, without changing HEAD:
	git checkout 0d1d7fc32 .

	# Then commit. Be sure and write a good message describing what you just did
	git commit
)

Git submodules:
# If you don’t want to type --submodule every time you run git diff, you can set it as the default format by setting the diff.submodule config value to “log”.
- git config --global diff.submodule log
# If you prefer to not manually fetch and merge in the subdirectory. If you run git submodule update --remote, Git will go into your submodules and fetch and update for you.
- git submodule update --remote <submodule-name>
	This command will by default assume that you want to update the checkout to the master branch of the submodule repository
# Git will also show you a short summary of changes to your submodules:
- git config --global status.submodulesummary 1