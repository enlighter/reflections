To add new files/changes within an git repository folder:

- git add .  [adds everything in the current folder n its subdirectories
				but doesn't add file deletions to the staging area, for
				that '--all' needs to be done]
or
- git add .<path to file to be added>
	'git add' adds the files to the staging area to be commited

- git add --all
	adds everything, even includes deletions made to the existing files
	in the reposutory to the staging area

- after add do - git commit -> then editor opens in which you add comment and save it
or
- git commit -m "<the comment>"
	commits the current changes added to the staging area to the repository

- git commit -a
	shortcut to automatically add all the changes made inside files already
	in repository and commit them.
	doesn't add file deletions or additions to the staging-area/repository,
	that needs to be manually added.

- git staatus
	shows the current status of the current directory and the staging area

- git push -u origin master
	enter the login and pass for git account, -u being upstream mode

- git config --global color.ui auto
	gives a color diff

- git config --global core.editor <editor_name>
	set default editor for git, e.g. editor_name = nano

- git config --global push.default upstream
	set push deault to upstream mode

- git config --global merge.conflictstyle diff3
	set diff3 as the style for merge conflict

- git config --list
	see all configuration list
	config is stored in "~/.gitconfig" file
	local config will be in repositories' ".git/config" file

- git config --global credential.helper 'cache --timeout=3600'
	Set the cache to timeout after 1 hour (setting is in seconds)
	- git config --global --unset credential.helper
	unsetting the setting

- git log -n 1
	-n says log to show 'n' commits from the last commit
	here n = 1

- git diff
	shows the difference between current file contents to the 
	contents of the staging area

- git diff --staged
	shows the difference between file contents in the staging area
	to the contents of the last commit

- git diff <commit-id1> <commit-id2>
	shows the difference between the contents of commit2 compared to
	commit1
- git diff <branch1> <branch2>

- git show <commit-id>
	shows the difference between the contents of 'this commit' to its
	parent commit, don't need to know the commit-id of the parent commit

- git branch
	shows the branches in the local repo

- git branch <branch-label>
	creates a new branch from the current activity pointer position, the
	new branch being identified by <branch-label>

- git branch -d <branch-label>
	delete the label named <branch-label>, the commit in the branch remain.
	do this after merging the <branch-label> branch to another branch, as all
	the commits in this branch now are within the log the merged branch.
	deletinig with this command without merging first renders all the commits
	within this branch to become inaccessible, effectively discarding the whole
	branch

- git checkout <commit-id>
	HEAD-less state, shifts the current activity pointer to the commit identified
	by <commit-id>

- git checkout <branch-label>
	shift the current repository activity HEAD to the HEAD of the branch
	identified by <branch-label>

- git checkout -b <branch-label>
	shortcut to create a new branch named <branch-label> from the current activity
	position and shift HEAD to the HEAD of this new branch

- git reset
	reset to a previous state
- git reset --hard
	hard reset, discards changes irrespective of other considerations

- branch merge
- git checkout <branch1> [shift to branch1 HEAD]
- git merge <branch2> <branch1>
	merge branch2 into branch1

- git pull origin master = git fetch origin
							+ git merge master origin/master
	git stores a offline version of remote master but not in the actual workspace
	- git fetch origin updates this offline version of remote branch in the local
	machine without affecting the workspace
	(after fetch but before merge)
	[git log origin/master]
	[git diff origin/master master]

- git init
	initialize a git repository in the current directory

- git remote
	view all the current remotes

- git remote -v
	outputs more info [verbose], usefull for checking if address is correct

- git remote add <name> <repo-address>
	for repos with only one remote, name is usually 'origin'
	e.g. git remote add origin https://github.com/enlighter/reflections.git
[git push origin master]
[git pull origin master]
			^		^
			|		|
		local		remote 
		origin		master

- git remote show <remote-name>
	e.g. git reote show 
	sample output:

* remote origin
  Fetch URL: https://github.com/enlighter/sirius.git
  Push  URL: https://github.com/enlighter/sirius.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)

- git remote rename <old-remote-name> <new-remote-name>
	renames a remote's refernce shortname
	e.g. git remote rename pb paul
	also, what used to be referenced at pb/master is now at paul/master

- git remote rm <remote-name>
	remove a remote

- git clone <git-repository-address>
	creates a copy (clone) of the repository at <git-repository-address>
	in the current directory